/**
 * Created with JavaScript.
 * User: rgxmg
 * Email: rgxmg@foxmail.com
 * Date: 2021/7/15
 * Time: 11:50
 *
 */

/**
 * 插入排序
 * 将数值分为已排序和未排序部分
 * 已排序部分已经完成了从小到大，未排序部分是乱序，如[-2, -1,7,9, 0, 3, 1] 该数组前3位为已排序，后3位为未排序
 *
 * 过程：
 * 1. 每次取一个未排序的值0，与已排序的最后一个值9进行比较，因为0 < 9，所以将0和9交换位置，变成[-2, -1,,7,0, 9, 3, 1],
 * 2. 然后继续拿0再与前一个已排序的7值进行比较
 * 3. 因为0 < 7,所以继续交换位置，变成[-2, -1 ,0,7, 9, 3, 1]
 * 4. 再拿0和前面的-1比较，因为 0 > -1, 所以不需要交换位置，又因为 排序的 值已经确定了从小到大的顺序，所以0再也没有必要再进行更前面位置后续的比较，因为肯定小于它
 * 5. 再从未排序中取出一个值，3进行1-4的步骤；
 * @param arr
 * @returns {*}
 */
function insertSort(arr) {
  for (let i = 1; i < arr.length; i++) {
    for (let j = i; j > 0; j--) {
      if (arr[j] < arr[j - 1]) {
        [arr[j], arr[j - 1]] = [arr[j - 1], arr[j]];
      } else break;
    }
  }
  return arr;
}
console.log(insertSort([3, 2, 4, 5, 1, -1, 9, 0, 15, 2, 3, 1, 5, 3, 6]));
